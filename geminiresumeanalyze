import streamlit as st
import os
import docx2txt
import spacy
import matplotlib.pyplot as plt
from textblob import TextBlob
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import fitz  # PyMuPDF
import google.generativeai as genai

# Configure Gemini API
genai.configure(api_key="gemini api key")  # üîÅ Replace with your key
model = genai.GenerativeModel("gemini-1.5-flash")

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

# ------------------------ Helper Functions ------------------------

def extract_text(path):
    if path.endswith(".pdf"):
        doc = fitz.open(path)
        return "".join(page.get_text() for page in doc)
    elif path.endswith(".docx"):
        return docx2txt.process(path)
    return ""

def extract_job_roles(resume_text):
    try:
        prompt = f"Give 5 clean job titles based on this resume. Just the titles like 'Software Developer', 'Data Analyst', etc:\n\n{resume_text}"
        response = model.generate_content(prompt)
        return [line.strip("‚Ä¢- ").strip() for line in response.text.splitlines() if line.strip()]
    except:
        return []

def get_job_description(role):
    try:
        prompt = f"Write a job description for the role: {role}."
        response = model.generate_content(prompt)
        return response.text.strip()
    except:
        return f"Could not generate job description for {role}."

def calculate_similarity(resume_text, jd_text):
    tfidf = TfidfVectorizer()
    vectors = tfidf.fit_transform([resume_text, jd_text])
    return cosine_similarity(vectors[0:1], vectors[1:2])[0][0] * 100

def analyze_sentiment(text):
    return TextBlob(text).sentiment.polarity

def generate_feedback(resume_text, jd_text):
    prompt = f"Compare this resume with the job description. Give strengths and improvement areas.\n\nResume:\n{resume_text}\n\nJob Description:\n{jd_text}"
    response = model.generate_content(prompt)
    return response.text.strip()

# ------------------------ Streamlit UI ------------------------

st.set_page_config(page_title="AI Resume Analyzer", layout="centered")

# --- Custom CSS ---
st.markdown("""
    <style>
    .main {
        background-color: #f8f9fa;
        padding: 25px;
        border-radius: 10px;
        font-family: 'Segoe UI', sans-serif;
    }
    .title {
        color: #003049;
        font-size: 40px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    .subtitle {
        font-size: 18px;
        color: #4f4f4f;
    }
    .section-header {
        font-size: 22px;
        color: #0e76a8;
        margin-top: 20px;
        padding-bottom: 5px;
        border-bottom: 1px solid #ccc;
    }
    </style>
""", unsafe_allow_html=True)

st.markdown('<div class="main">', unsafe_allow_html=True)
st.markdown('<div class="title">üìÑ AI Resume Analyzer with Gemini</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">Upload your resume to get job suggestions and detailed analysis.</div>', unsafe_allow_html=True)

# Upload resume
uploaded_file = st.file_uploader("üìÅ Upload Resume (PDF or DOCX)", type=["pdf", "docx"])

if uploaded_file:
    os.makedirs("uploads", exist_ok=True)
    file_path = os.path.join("uploads", uploaded_file.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    resume_text = extract_text(file_path)
    st.success("‚úÖ Resume uploaded and processed successfully.")

    with st.expander("üìÑ View Extracted Resume Text"):
        st.write(resume_text)

    st.markdown('<div class="section-header">üíº Suggested Job Roles</div>', unsafe_allow_html=True)
    job_roles = extract_job_roles(resume_text)

    if job_roles:
        selected_role = st.selectbox("üîΩ Select a Job Role", job_roles)

        if selected_role:
            with st.spinner("üîç Analyzing your resume..."):
                job_description = get_job_description(selected_role)
                score = calculate_similarity(resume_text, job_description)
                sentiment = analyze_sentiment(resume_text)
                feedback = generate_feedback(resume_text, job_description)

            st.markdown('<div class="section-header">üìä Analysis Results</div>', unsafe_allow_html=True)

            # Match Quality
            if score > 80:
                match_label = "üü¢ Excellent Match"
            elif score > 50:
                match_label = "üü° Moderate Match"
            else:
                match_label = "üî¥ Poor Match"

            # Display in tabs
            tab1, tab2, tab3 = st.tabs(["üßæ Job Description", "üìà Score & Sentiment", "ü§ñ AI Feedback"])

            with tab1:
                st.markdown(f"**Job Title:** `{selected_role}`")
                st.code(job_description)

            with tab2:
                st.metric("Match Score", f"{score:.2f} %", help=match_label)
                st.metric("Sentiment Score", f"{sentiment:.2f}")
                # Creative Pie Chart
                labels = ['Match Score', 'Remaining']
                sizes = [score, 100 - score]
                colors = ['#00b894', '#dfe6e9']
                explode = (0.1, 0)  # Explode the first slice (highlight match)

                fig, ax = plt.subplots()
                ax.pie(sizes, explode=explode, labels=labels, colors=colors,
                      autopct='%1.1f%%', startangle=90, textprops={'fontsize': 14})
                ax.axis('equal')  # Equal aspect ratio for perfect circle
                st.pyplot(fig)

            with tab3:
                st.info(feedback)
    else:
        st.warning("‚ö†Ô∏è No job roles could be generated. Try uploading a more detailed resume.")
else:
    st.info("üì§ Please upload a resume to begin.")

st.markdown('</div>', unsafe_allow_html=True)
